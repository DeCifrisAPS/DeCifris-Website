(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@angular/common'), require('@angular/platform-browser/animations')) :
    typeof define === 'function' && define.amd ? define('angular-ng-sidenav', ['exports', '@angular/core', '@angular/animations', '@angular/common', '@angular/platform-browser/animations'], factory) :
    (global = global || self, factory(global['angular-ng-sidenav'] = {}, global.ng.core, global.ng.animations, global.ng.common, global.ng.platformBrowser.animations));
}(this, (function (exports, core, animations, common, animations$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/sidenav.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SidenavComponent = /** @class */ (function () {
        function SidenavComponent() {
        }
        /**
         * @return {?}
         */
        SidenavComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        SidenavComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-sidenav-container',
                        template: '<ng-content></ng-content>',
                        styles: ["\n    :host {\n      display: flex;\n      align-items: stretch;\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        SidenavComponent.ctorParameters = function () { return []; };
        return SidenavComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/sidenav-animations.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Animation that slides a drawer in and out.
     * @type {?}
     */
    var sidenavAnimations = {
        serDrawerState: animations.trigger('drawerState', [
            animations.state('expanded', animations.style({ width: '{{ drawerWidth }}' }), { params: { drawerWidth: '250px' } }),
            animations.state('collapsed', animations.style({ width: '{{ drawerWidthCollapsed }}' }), { params: { drawerWidthCollapsed: '80px' } }),
            animations.state('hidden', animations.style({ width: '0' })),
            animations.transition('collapsed => expanded', animations.animate('200ms ease-in')),
            animations.transition('expanded => collapsed', animations.animate('200ms ease-out')),
            animations.transition('hidden => expanded', animations.animate('200ms ease-in')),
            animations.transition('expanded => hidden', animations.animate('200ms ease-out'))
        ]),
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/ng-sidenav/ng-sidenav.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgSidenavComponent = /** @class */ (function () {
        function NgSidenavComponent() {
            this.expanded = true; // Whether drawer is open or close depend on drawer state
            // Whether drawer is open or close depend on drawer state
            this.drawerState = 'expanded'; // Drawer state (expanded, collapsed, hidden)
            // Drawer state (expanded, collapsed, hidden)
            this.color = '#19222a';
            this.drawerWidth = '250px';
            this.drawerWidthCollapsed = '80px';
        }
        /**
         * @return {?}
         */
        NgSidenavComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgSidenavComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            // Drawer state change
            if (changes && changes.drawerState) {
                this._drawerState = changes.drawerState.currentValue;
            }
            // drawer open/close change
            if (changes && changes.expanded) {
                this.expanded = changes.expanded.currentValue;
                this.drawerState = this.expanded ? 'expanded' : this._drawerState;
            }
        };
        NgSidenavComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-sidenav',
                        template: "<div class=\"ng-sidenav\"\n     [style.backgroundColor]=\"color\"\n     [@drawerState]=\"{value:drawerState,\n     params:{drawerWidth:drawerWidth, drawerWidthCollapsed: drawerWidthCollapsed}}\">\n  <ng-content></ng-content>\n</div>\n",
                        animations: [sidenavAnimations.serDrawerState],
                        styles: [".ng-sidenav{display:flex;flex-direction:column;height:100%;width:100%;box-sizing:border-box}"]
                    }] }
        ];
        /** @nocollapse */
        NgSidenavComponent.ctorParameters = function () { return []; };
        NgSidenavComponent.propDecorators = {
            expanded: [{ type: core.Input }],
            drawerState: [{ type: core.Input }],
            color: [{ type: core.Input }],
            drawerWidth: [{ type: core.Input }],
            drawerWidthCollapsed: [{ type: core.Input }]
        };
        return NgSidenavComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgSidenavComponent.prototype._drawerState;
        /** @type {?} */
        NgSidenavComponent.prototype.expanded;
        /** @type {?} */
        NgSidenavComponent.prototype.drawerState;
        /** @type {?} */
        NgSidenavComponent.prototype.color;
        /** @type {?} */
        NgSidenavComponent.prototype.drawerWidth;
        /** @type {?} */
        NgSidenavComponent.prototype.drawerWidthCollapsed;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/components/ng-sidenav-content/ng-sidenav-content.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgSidenavContentComponent = /** @class */ (function () {
        function NgSidenavContentComponent() {
        }
        /**
         * @return {?}
         */
        NgSidenavContentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        NgSidenavContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-sidenav-content',
                        template: "<ng-content></ng-content>\n",
                        styles: [":host{flex:1;height:100%;overflow-y:auto;padding:20px;box-sizing:border-box}"]
                    }] }
        ];
        /** @nocollapse */
        NgSidenavContentComponent.ctorParameters = function () { return []; };
        return NgSidenavContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/hidden-on-collapsed.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HiddenOnCollapsedDirective = /** @class */ (function () {
        function HiddenOnCollapsedDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        Object.defineProperty(HiddenOnCollapsedDirective.prototype, "hiddenOnCollapsed", {
            set: /**
             * @param {?} isShown
             * @return {?}
             */
            function (isShown) {
                if (isShown) {
                    // If condition is true add template to DOM
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
                else {
                    // Else remove template from DOM
                    this.viewContainer.clear();
                }
            },
            enumerable: true,
            configurable: true
        });
        HiddenOnCollapsedDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[hiddenOnCollapsed]'
                    },] }
        ];
        /** @nocollapse */
        HiddenOnCollapsedDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef }
        ]; };
        HiddenOnCollapsedDirective.propDecorators = {
            hiddenOnCollapsed: [{ type: core.Input }]
        };
        return HiddenOnCollapsedDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        HiddenOnCollapsedDirective.prototype.templateRef;
        /**
         * @type {?}
         * @private
         */
        HiddenOnCollapsedDirective.prototype.viewContainer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/sidenav.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SidenavModule = /** @class */ (function () {
        function SidenavModule() {
        }
        SidenavModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SidenavComponent, NgSidenavComponent, NgSidenavContentComponent, HiddenOnCollapsedDirective],
                        imports: [common.CommonModule, animations$1.BrowserAnimationsModule],
                        exports: [SidenavComponent, NgSidenavComponent, NgSidenavContentComponent, HiddenOnCollapsedDirective]
                    },] }
        ];
        return SidenavModule;
    }());

    exports.HiddenOnCollapsedDirective = HiddenOnCollapsedDirective;
    exports.NgSidenavComponent = NgSidenavComponent;
    exports.NgSidenavContentComponent = NgSidenavContentComponent;
    exports.SidenavComponent = SidenavComponent;
    exports.SidenavModule = SidenavModule;
    exports.sidenavAnimations = sidenavAnimations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-ng-sidenav.umd.js.map
