import { Component, Input, Directive, TemplateRef, ViewContainerRef, NgModule } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/sidenav.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidenavComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SidenavComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-sidenav-container',
                template: '<ng-content></ng-content>',
                styles: [`
    :host {
      display: flex;
      align-items: stretch;
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
    }
  `]
            }] }
];
/** @nocollapse */
SidenavComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/sidenav-animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Animation that slides a drawer in and out.
 * @type {?}
 */
const sidenavAnimations = {
    serDrawerState: trigger('drawerState', [
        state('expanded', style({ width: '{{ drawerWidth }}' }), { params: { drawerWidth: '250px' } }),
        state('collapsed', style({ width: '{{ drawerWidthCollapsed }}' }), { params: { drawerWidthCollapsed: '80px' } }),
        state('hidden', style({ width: '0' })),
        transition('collapsed => expanded', animate('200ms ease-in')),
        transition('expanded => collapsed', animate('200ms ease-out')),
        transition('hidden => expanded', animate('200ms ease-in')),
        transition('expanded => hidden', animate('200ms ease-out'))
    ]),
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ng-sidenav/ng-sidenav.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgSidenavComponent {
    constructor() {
        this.expanded = true; // Whether drawer is open or close depend on drawer state
        // Whether drawer is open or close depend on drawer state
        this.drawerState = 'expanded'; // Drawer state (expanded, collapsed, hidden)
        // Drawer state (expanded, collapsed, hidden)
        this.color = '#19222a';
        this.drawerWidth = '250px';
        this.drawerWidthCollapsed = '80px';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Drawer state change
        if (changes && changes.drawerState) {
            this._drawerState = changes.drawerState.currentValue;
        }
        // drawer open/close change
        if (changes && changes.expanded) {
            this.expanded = changes.expanded.currentValue;
            this.drawerState = this.expanded ? 'expanded' : this._drawerState;
        }
    }
}
NgSidenavComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-sidenav',
                template: "<div class=\"ng-sidenav\"\n     [style.backgroundColor]=\"color\"\n     [@drawerState]=\"{value:drawerState,\n     params:{drawerWidth:drawerWidth, drawerWidthCollapsed: drawerWidthCollapsed}}\">\n  <ng-content></ng-content>\n</div>\n",
                animations: [sidenavAnimations.serDrawerState],
                styles: [".ng-sidenav{display:flex;flex-direction:column;height:100%;width:100%;box-sizing:border-box}"]
            }] }
];
/** @nocollapse */
NgSidenavComponent.ctorParameters = () => [];
NgSidenavComponent.propDecorators = {
    expanded: [{ type: Input }],
    drawerState: [{ type: Input }],
    color: [{ type: Input }],
    drawerWidth: [{ type: Input }],
    drawerWidthCollapsed: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgSidenavComponent.prototype._drawerState;
    /** @type {?} */
    NgSidenavComponent.prototype.expanded;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerState;
    /** @type {?} */
    NgSidenavComponent.prototype.color;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerWidth;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerWidthCollapsed;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ng-sidenav-content/ng-sidenav-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgSidenavContentComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgSidenavContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-sidenav-content',
                template: "<ng-content></ng-content>\n",
                styles: [":host{flex:1;height:100%;overflow-y:auto;padding:20px;box-sizing:border-box}"]
            }] }
];
/** @nocollapse */
NgSidenavContentComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/hidden-on-collapsed.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HiddenOnCollapsedDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     */
    constructor(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    /**
     * @param {?} isShown
     * @return {?}
     */
    set hiddenOnCollapsed(isShown) {
        if (isShown) {
            // If condition is true add template to DOM
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            // Else remove template from DOM
            this.viewContainer.clear();
        }
    }
}
HiddenOnCollapsedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hiddenOnCollapsed]'
            },] }
];
/** @nocollapse */
HiddenOnCollapsedDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef }
];
HiddenOnCollapsedDirective.propDecorators = {
    hiddenOnCollapsed: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HiddenOnCollapsedDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    HiddenOnCollapsedDirective.prototype.viewContainer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/sidenav.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidenavModule {
}
SidenavModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SidenavComponent, NgSidenavComponent, NgSidenavContentComponent, HiddenOnCollapsedDirective],
                imports: [CommonModule, BrowserAnimationsModule],
                exports: [SidenavComponent, NgSidenavComponent, NgSidenavContentComponent, HiddenOnCollapsedDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: angular-ng-sidenav.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { HiddenOnCollapsedDirective, NgSidenavComponent, NgSidenavContentComponent, SidenavComponent, SidenavModule, sidenavAnimations };
//# sourceMappingURL=angular-ng-sidenav.js.map
