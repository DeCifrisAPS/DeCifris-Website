/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ng-sidenav/ng-sidenav.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { sidenavAnimations } from '../../sidenav-animations';
var NgSidenavComponent = /** @class */ (function () {
    function NgSidenavComponent() {
        this.expanded = true; // Whether drawer is open or close depend on drawer state
        // Whether drawer is open or close depend on drawer state
        this.drawerState = 'expanded'; // Drawer state (expanded, collapsed, hidden)
        // Drawer state (expanded, collapsed, hidden)
        this.color = '#19222a';
        this.drawerWidth = '250px';
        this.drawerWidthCollapsed = '80px';
    }
    /**
     * @return {?}
     */
    NgSidenavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgSidenavComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Drawer state change
        if (changes && changes.drawerState) {
            this._drawerState = changes.drawerState.currentValue;
        }
        // drawer open/close change
        if (changes && changes.expanded) {
            this.expanded = changes.expanded.currentValue;
            this.drawerState = this.expanded ? 'expanded' : this._drawerState;
        }
    };
    NgSidenavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-sidenav',
                    template: "<div class=\"ng-sidenav\"\n     [style.backgroundColor]=\"color\"\n     [@drawerState]=\"{value:drawerState,\n     params:{drawerWidth:drawerWidth, drawerWidthCollapsed: drawerWidthCollapsed}}\">\n  <ng-content></ng-content>\n</div>\n",
                    animations: [sidenavAnimations.serDrawerState],
                    styles: [".ng-sidenav{display:flex;flex-direction:column;height:100%;width:100%;box-sizing:border-box}"]
                }] }
    ];
    /** @nocollapse */
    NgSidenavComponent.ctorParameters = function () { return []; };
    NgSidenavComponent.propDecorators = {
        expanded: [{ type: Input }],
        drawerState: [{ type: Input }],
        color: [{ type: Input }],
        drawerWidth: [{ type: Input }],
        drawerWidthCollapsed: [{ type: Input }]
    };
    return NgSidenavComponent;
}());
export { NgSidenavComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgSidenavComponent.prototype._drawerState;
    /** @type {?} */
    NgSidenavComponent.prototype.expanded;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerState;
    /** @type {?} */
    NgSidenavComponent.prototype.color;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerWidth;
    /** @type {?} */
    NgSidenavComponent.prototype.drawerWidthCollapsed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2lkZW5hdi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW5nLXNpZGVuYXYvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZy1zaWRlbmF2L25nLXNpZGVuYXYuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQW1DLE1BQU0sZUFBZSxDQUFDO0FBQ2pGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRTNEO0lBZ0JFO1FBTlMsYUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLHlEQUF5RDs7UUFDMUUsZ0JBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQyw2Q0FBNkM7O1FBQ3ZFLFVBQUssR0FBRyxTQUFTLENBQUM7UUFDbEIsZ0JBQVcsR0FBRyxPQUFPLENBQUM7UUFDdEIseUJBQW9CLEdBQUcsTUFBTSxDQUFDO0lBR3ZDLENBQUM7Ozs7SUFFRCxxQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7OztJQUVELHdDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxzQkFBc0I7UUFDdEIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1NBQ3REO1FBQ0QsMkJBQTJCO1FBQzNCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztZQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUNuRTtJQUNILENBQUM7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLHNQQUEwQztvQkFFMUMsVUFBVSxFQUFFLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDOztpQkFDL0M7Ozs7OzJCQUtFLEtBQUs7OEJBQ0wsS0FBSzt3QkFDTCxLQUFLOzhCQUNMLEtBQUs7dUNBQ0wsS0FBSzs7SUFtQlIseUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQTNCWSxrQkFBa0I7Ozs7OztJQUU3QiwwQ0FBcUI7O0lBRXJCLHNDQUF5Qjs7SUFDekIseUNBQWtDOztJQUNsQyxtQ0FBMkI7O0lBQzNCLHlDQUErQjs7SUFDL0Isa0RBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3NpZGVuYXZBbmltYXRpb25zfSBmcm9tICcuLi8uLi9zaWRlbmF2LWFuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1zaWRlbmF2JyxcbiAgdGVtcGxhdGVVcmw6ICcuL25nLXNpZGVuYXYuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uZy1zaWRlbmF2LmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IFtzaWRlbmF2QW5pbWF0aW9ucy5zZXJEcmF3ZXJTdGF0ZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdTaWRlbmF2Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAvLyBUT0RPOiBBZGQgbW9kZTogJ292ZXInIHwgJ3B1c2gnIHwgJ3NpZGUnXG4gIHByaXZhdGUgX2RyYXdlclN0YXRlO1xuXG4gIEBJbnB1dCgpIGV4cGFuZGVkID0gdHJ1ZTsgLy8gV2hldGhlciBkcmF3ZXIgaXMgb3BlbiBvciBjbG9zZSBkZXBlbmQgb24gZHJhd2VyIHN0YXRlXG4gIEBJbnB1dCgpIGRyYXdlclN0YXRlID0gJ2V4cGFuZGVkJzsgLy8gRHJhd2VyIHN0YXRlIChleHBhbmRlZCwgY29sbGFwc2VkLCBoaWRkZW4pXG4gIEBJbnB1dCgpIGNvbG9yID0gJyMxOTIyMmEnO1xuICBASW5wdXQoKSBkcmF3ZXJXaWR0aCA9ICcyNTBweCc7XG4gIEBJbnB1dCgpIGRyYXdlcldpZHRoQ29sbGFwc2VkID0gJzgwcHgnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgLy8gRHJhd2VyIHN0YXRlIGNoYW5nZVxuICAgIGlmIChjaGFuZ2VzICYmIGNoYW5nZXMuZHJhd2VyU3RhdGUpIHtcbiAgICAgIHRoaXMuX2RyYXdlclN0YXRlID0gY2hhbmdlcy5kcmF3ZXJTdGF0ZS5jdXJyZW50VmFsdWU7XG4gICAgfVxuICAgIC8vIGRyYXdlciBvcGVuL2Nsb3NlIGNoYW5nZVxuICAgIGlmIChjaGFuZ2VzICYmIGNoYW5nZXMuZXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuZXhwYW5kZWQgPSBjaGFuZ2VzLmV4cGFuZGVkLmN1cnJlbnRWYWx1ZTtcbiAgICAgIHRoaXMuZHJhd2VyU3RhdGUgPSB0aGlzLmV4cGFuZGVkID8gJ2V4cGFuZGVkJyA6IHRoaXMuX2RyYXdlclN0YXRlO1xuICAgIH1cbiAgfVxufVxuIl19